import logging
import setting
from pymongo import MongoClient
from bs4 import BeautifulSoup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils import executor
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.callback_data import CallbackData
import requests


TOKEN = setting.token
admin_chat_id = setting.admin_chat_id
priem_chat_id = setting.priem_chat_id
cluster = MongoClient(setting.mongo)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
db = cluster["Zayavka_Bot"]
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ(–∫–æ–ª–ª–µ–∫—Ü–∏–∏)
workers = db["service"]

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π storage, –æ–Ω–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–∑–∂–µ.
storage = MemoryStorage()
# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ bot –∏ storage
dp = Dispatcher(bot, storage=storage)
# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–∏–¥–¥–ª–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

# –ü—Ä–æ–ø–∏—à–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
reg_button = KeyboardButton("üì© –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É")
reg_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
reg_keyboard.add(reg_button)



# –ü—Ä–æ–ø–∏—à–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –û—Ç–º–µ–Ω–∞ –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
cancel_button = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")

cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(cancel_button)

# –ü—Ä–æ–ø–∏—à–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
next_button = KeyboardButton("‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
next_button2 = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
next_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
next_keyboard.add(next_button)
next_keyboard.add(next_button2)

# –ü—Ä–æ–ø–∏—à–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
next_com_button = KeyboardButton("‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
next_com_button2 = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
next_com_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
next_com_keyboard.add(next_com_button)
next_com_keyboard.add(next_com_button2)

# –ü—Ä–æ–ø–∏—à–µ–º –¥–∞—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
date_button1 = KeyboardButton("01.01.2023")
date_button2 = KeyboardButton("02.01.2023")
date_button3 = KeyboardButton("03.01.2023")
date_button4 = KeyboardButton("04.01.2023")
date_button5 = KeyboardButton("05.01.2023")
date_button6 = KeyboardButton("06.01.2023")
date_button7 = KeyboardButton("07.01.2023")
date_button8 = KeyboardButton("08.01.2023")
date_button9 = KeyboardButton("09.01.2023")
date_button10 = KeyboardButton("10.01.2023")
date_button11 = KeyboardButton("11.01.2023")
date_button12 = KeyboardButton("12.01.2023")
date_button13 = KeyboardButton("13.01.2023")
date_button14 = KeyboardButton("14.01.2023")
date_button15 = KeyboardButton("15.01.2023")
date_button16 = KeyboardButton("16.01.2023")
date_button17 = KeyboardButton("17.01.2023")
date_button18 = KeyboardButton("18.01.2023")
date_button19 = KeyboardButton("19.01.2023")
date_button20 = KeyboardButton("20.01.2023")
date_button21 = KeyboardButton("21.01.2023")
date_button22 = KeyboardButton("22.01.2023")
date_button23 = KeyboardButton("23.01.2023")
date_button24 = KeyboardButton("24.01.2023")
date_button25 = KeyboardButton("25.01.2023")
date_button26 = KeyboardButton("26.01.2023")
date_button27 = KeyboardButton("27.01.2023")
date_button28 = KeyboardButton("28.01.2023")
date_button29 = KeyboardButton("29.01.2023")
date_button30 = KeyboardButton("30.01.2023")
date_button31 = KeyboardButton("31.01.2023")




date_button_cancel = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")

date_button = ReplyKeyboardMarkup(resize_keyboard=True)
date_button.add(date_button_cancel)

date_button.add(date_button1, date_button2, date_button3)
date_button.add(date_button4, date_button5, date_button6)
date_button.add(date_button7, date_button8, date_button9)
date_button.add(date_button10, date_button11, date_button12)
date_button.add(date_button13, date_button14, date_button15)
date_button.add(date_button16, date_button17, date_button18)
date_button.add(date_button19, date_button20, date_button21)
date_button.add(date_button22, date_button23, date_button24)
date_button.add(date_button25, date_button26, date_button27)
date_button.add(date_button28, date_button29, date_button30)
date_button.add(date_button31)
date_button.add()


# –ü—Ä–æ–ø–∏—à–µ–º –≤—Ä–µ–º—è
time_button1 = KeyboardButton("08:00")
time_button2 = KeyboardButton("08:30")
time_button3 = KeyboardButton("09:00")
time_button4 = KeyboardButton("09:30")
time_button5 = KeyboardButton("10:00")
time_button6 = KeyboardButton("10:30")
time_button7 = KeyboardButton("11:00")
time_button8 = KeyboardButton("11:30")
time_button9 = KeyboardButton("12:00")
time_button10 = KeyboardButton("12:30")
time_button11 = KeyboardButton("13:00")
time_button12 = KeyboardButton("13:30")
time_button13 = KeyboardButton("14:00")
time_button14 = KeyboardButton("14:30")
time_button15 = KeyboardButton("15:00")
time_button16 = KeyboardButton("15:30")
time_button17 = KeyboardButton("16:00")
time_button18 = KeyboardButton("16:30")
time_button19 = KeyboardButton("17:00")
time_button20 = KeyboardButton("17:30")
time_button21 = KeyboardButton("18:00")
time_button22 = KeyboardButton("18:30")
time_button23 = KeyboardButton("19:00")
time_button24 = KeyboardButton("19:30")
time_button25 = KeyboardButton("20:00")
time_button26 = KeyboardButton("20:30")
time_button27 = KeyboardButton("21:00")
time_button28 = KeyboardButton("21:30")
time_button29 = KeyboardButton("22:00")
time_button30 = KeyboardButton("22:30")
time_button31 = KeyboardButton("23:00")
time_button32 = KeyboardButton("23:30")
time_button33 = KeyboardButton("00:00")
time_button34 = KeyboardButton("00:30")
time_button35 = KeyboardButton("01:00")
time_button36 = KeyboardButton("01:30")
time_button37 = KeyboardButton("02:00")
time_button38 = KeyboardButton("02:30")
time_button39 = KeyboardButton("03:00")
time_button40 = KeyboardButton("03:30")
time_button41 = KeyboardButton("04:00")
time_button42 = KeyboardButton("04:30")
time_button43 = KeyboardButton("05:00")
time_button44 = KeyboardButton("05:30")
time_button45 = KeyboardButton("06:00")
time_button46 = KeyboardButton("06:30")
time_button47 = KeyboardButton("07:00")
time_button48 = KeyboardButton("07:30")

time_button_cancel = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")

time_button = ReplyKeyboardMarkup(resize_keyboard=True)
time_button.add(date_button_cancel)
time_button.add(time_button1, time_button2, time_button3,)
time_button.add(time_button4, time_button5, time_button6,)
time_button.add(time_button7, time_button8, time_button9,)
time_button.add(time_button10, time_button11, time_button12,)
time_button.add(time_button13, time_button14, time_button15,)
time_button.add(time_button16, time_button17, time_button18,)
time_button.add(time_button19, time_button20, time_button21,)
time_button.add(time_button22, time_button23, time_button24,)
time_button.add(time_button25, time_button26, time_button27,)
time_button.add(time_button28, time_button29, time_button30,)
time_button.add(time_button31, time_button32, time_button33,)
time_button.add(time_button34, time_button35, time_button36,)
time_button.add(time_button37, time_button38, time_button39,)
time_button.add(time_button40, time_button41, time_button42,)
time_button.add(time_button43, time_button44, time_button45,)
time_button.add(time_button46, time_button47, time_button48,)
time_button.add()

# –ü—Ä–æ–ø–∏—à–µ–º –º–æ–¥–µ–ª–∏ —Ä–µ—Ñ–æ–≤
ref_button1 = KeyboardButton("Carrier Maxima 1000")
ref_button2 = KeyboardButton("Thermo King SL 100")
ref_button3 = KeyboardButton("Carrier Maxima 1200")
ref_button4 = KeyboardButton("Thermo King SL 200")
ref_button5 = KeyboardButton("Carrier Maxima 1200Mt")
ref_button6 = KeyboardButton("Thermo King SL 300")
ref_button7 = KeyboardButton("Carrier Maxima 1300")
ref_button8 = KeyboardButton("Thermo King SL 400")
ref_button9 = KeyboardButton("Carrier Maxima 1300Mt")
ref_button10 = KeyboardButton("Thermo King SL TSi")
ref_button11 = KeyboardButton("Carrier Maxima Plus")
ref_button12 = KeyboardButton("Thermo King SL 100e")
ref_button13 = KeyboardButton("Carrier Maxima 2")
ref_button14 = KeyboardButton("Thermo King SL 200e")
ref_button15 = KeyboardButton("Carrier Vector 1350")
ref_button16 = KeyboardButton("Thermo King SL 300e")
ref_button17 = KeyboardButton("Carrier Vector 1550")
ref_button18 = KeyboardButton("Thermo King SL 400e")
ref_button19 = KeyboardButton("Carrier Vector 1800")
ref_button20 = KeyboardButton("Thermo King SLXe Spectrum")
ref_button21 = KeyboardButton("Carrier Vector 1800Mt")
ref_button22 = KeyboardButton("Thermo King SLX 100")
ref_button23 = KeyboardButton("Carrier Vector 1850")
ref_button24 = KeyboardButton("Thermo King SLX 200")
ref_button25 = KeyboardButton("Carrier Vector 1850Mt")
ref_button26 = KeyboardButton("Thermo King SLX 300")
ref_button27 = KeyboardButton("Carrier Xarios 300")
ref_button28 = KeyboardButton("Thermo King SLX 400")
ref_button29 = KeyboardButton("Carrier Xarios 350")
ref_button30 = KeyboardButton("Thermo King SLX 100e")
ref_button31 = KeyboardButton("Carrier Xarios 350Mt")
ref_button32 = KeyboardButton("Thermo King SLX 200e")
ref_button33 = KeyboardButton("Carrier Xarios 400")
ref_button34 = KeyboardButton("Thermo King SLX 300e")
ref_button35 = KeyboardButton("Carrier Xarios 500")
ref_button36 = KeyboardButton("Thermo King SLX 400e")
ref_button37 = KeyboardButton("Carrier Xarios 500Mt")
ref_button38 = KeyboardButton("Thermo King SLXe Spectrum")
ref_button39 = KeyboardButton("Carrier Xarios 600")
ref_button40 = KeyboardButton("Thermo King SMX-I")
ref_button41 = KeyboardButton("Carrier Supra 750")
ref_button42 = KeyboardButton("Thermo King SMX-II")
ref_button43 = KeyboardButton("Carrier Supra 850")
ref_button44 = KeyboardButton("Thermo King SMX Tsi")
ref_button45 = KeyboardButton("Carrier Supra 950")
ref_button46 = KeyboardButton("Thermo King SMX 30")
ref_button47 = KeyboardButton("Carrier Supra 950Mt")
ref_button48 = KeyboardButton("Thermo King SMX 50")
ref_button_cancel = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")




ref_button = ReplyKeyboardMarkup(resize_keyboard=True)
ref_button.add(date_button_cancel)
ref_button.add(ref_button1, ref_button2,)
ref_button.add(ref_button3, ref_button4,)
ref_button.add(ref_button5, ref_button6,)
ref_button.add(ref_button7, ref_button8,)
ref_button.add(ref_button9, ref_button10,)
ref_button.add(ref_button11, ref_button12,)
ref_button.add(ref_button13, ref_button14,)
ref_button.add(ref_button15, ref_button16,)
ref_button.add(ref_button17, ref_button18,)
ref_button.add(ref_button19, ref_button20,)
ref_button.add(ref_button21, ref_button22,)
ref_button.add(ref_button23, ref_button24,)
ref_button.add(ref_button25, ref_button26,)
ref_button.add(ref_button27, ref_button28,)
ref_button.add(ref_button29, ref_button30,)
ref_button.add(ref_button31, ref_button32,)
ref_button.add(ref_button33, ref_button34,)
ref_button.add(ref_button35, ref_button36,)
ref_button.add(ref_button37, ref_button38,)
ref_button.add(ref_button39, ref_button40,)
ref_button.add(ref_button41, ref_button42,)
ref_button.add(ref_button43, ref_button44,)
ref_button.add(ref_button45, ref_button46,)
ref_button.add(ref_button47, ref_button48,)



# –ü—Ä–æ–ø–∏—à–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
# –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Callback –¥–∞–Ω–Ω—ã—Ö
reg_callback = CallbackData("reg", "status", "chat_id", "nick", "date_z", "name_c")


# –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª–∞–≤—É –≤ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
def inline(chat_id, nick, date_z, name_c):
    confirm = InlineKeyboardButton(
        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
        callback_data=reg_callback.new(
            status="1", chat_id=chat_id, nick=nick, date_z=date_z, name_c=name_c
        ),
    )
    cancel = InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=reg_callback.new(
            status="0", chat_id=chat_id, nick="-", date_z="-", name_c="-"
        ),
    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(confirm).insert(cancel)
    return conf_inline

## –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
def inline2(chat_id, nick, date_z, name_c):
    cancel = InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
        callback_data=reg_callback.new(
            status="00", chat_id=chat_id, nick="-", date_z="-", name_c="-"
        ),
    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(cancel)
    return conf_inline

## –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
def inline3(chat_id, nick, date_z, name_c):
    cancel = InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",

    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(cancel)
    return conf_inline

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å, –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ–≥–æ StatesGroup, –æ–Ω –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —é–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É
# –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∑–∞–≥—É–≥–ª–∏—Ç–µ "aiogram –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
class Anketa(StatesGroup):
    # –≤–Ω—É—Ç—Ä–∏ –æ–±—ä—è–≤–ª—è–µ–º –°—Ç–µ–π—Ç—ã(—Å–æ—Å—Ç–æ—è–Ω–∏—è), –¥–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–ø–æ—á–∫–µ —ç—Ç–∏—Ö —Å—Ç–µ–π—Ç–æ–≤
    date_z = State()
    timer_r = State()
    model_r = State()
    name_c = State()
    nomer_p = State()
    nomer_ts = State()
    date_r = State()
    comments = State()
    text = State()

@dp.message_handler(commands=["start"])
async def welcome(message: types.Message):

        await bot.send_message(
            message.chat.id,
            f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}!</b>\n\n"
            f"–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç(–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ), –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \nüëá\n<b>‚úâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=reg_keyboard,
        )


@dp.message_handler(Text(equals="–∑–∞—è–≤–∫–∏"), state="*")
async def problem(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.chat.id,
        f"<b>üëâ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> https://bit.ly/3yj7Rjq",
        parse_mode=ParseMode.HTML,


    )


@dp.message_handler(Text(equals="–ó–∞—è–≤–∫–∏"), state="*")
async def problem(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.chat.id,
        f"<b>üëâ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> https://docs.google.com/spreadsheets/d/11OsVUOnU7biLFLm4A8LyA0KyOiZTTt-YK2g_FfOkN-Y/edit?usp=sharing",
        parse_mode=ParseMode.HTML,

    )

@dp.message_handler(Text(equals="/zayavka"), state="*")
async def problem(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.chat.id,
        f"<b>üëâ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> https://docs.google.com/spreadsheets/d/11OsVUOnU7biLFLm4A8LyA0KyOiZTTt-YK2g_FfOkN-Y/edit?usp=sharing",
        parse_mode=ParseMode.HTML,


    )

@dp.message_handler(Text(equals="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"), state="*")
async def menu_button(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(
        message.chat.id,

        f"<b>üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, {message.from_user.username}!</b>\n\n"
        f"–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç(–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ), –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \nüëá\n<b>‚úâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=reg_keyboard,

    )

@dp.message_handler(Text(equals="‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def menu_button(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.chat.id, "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º"

    )

# –¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–µ–º —Ü–µ–ø–æ—á–∫—É —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(Text(equals="üì© –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"), state="*")
async def date_z(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.chat.id,
        f"<b>–î–∞—Ç–∞(–¥–¥.–º–º.–≥–≥):</b>\n\n"
        f"üîî –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É",
        parse_mode=ParseMode.HTML,
        reply_markup=date_button
    )



    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–µ–π—Ç
    await Anketa.date_z.set()
@dp.message_handler(state=Anketa.date_z, content_types=types.ContentTypes.TEXT)
async def timer_r(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(date_z=message.text)
    await bot.send_message(
        message.chat.id,
        f"<b>–í—Ä–µ–º—è(—á—á:–º–º):</b>\n\n"
        f"üîî –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è",
         parse_mode=ParseMode.HTML,
         reply_markup=time_button
    )

    await Anketa.timer_r.set()

#–¥–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
@dp.message_handler(state=Anketa.timer_r, content_types=types.ContentTypes.TEXT)
async def model_r(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(timer_r=message.text)
    await bot.send_message(
        message.chat.id,
        "<b>–ú–æ–¥–µ–ª—å –•–û–£:</b>\n\n" 
        f"üîî –í—ã–±–µ—Ä–∏—Ç–µ –ú–æ–¥–µ–ª—å –•–û–£ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
        parse_mode=ParseMode.HTML,
        reply_markup=ref_button

    )

    await Anketa.model_r.set()

#–≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞
@dp.message_handler(state=Anketa.model_r, content_types=types.ContentTypes.TEXT)
async def name_c(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(model_r=message.text)
    await bot.send_message(
        message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏(–∫–ª–∏–µ–Ω—Ç–∞):</b>", reply_markup=cancel_keyboard, parse_mode=ParseMode.HTML,
    )

    await Anketa.name_c.set()

#–º–æ–¥–µ–ª—å —Ä–µ—Ñ–∞
@dp.message_handler(state=Anketa.name_c, content_types=types.ContentTypes.TEXT)
async def nomer_p(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(name_c=message.text)
    await bot.send_message(
        message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>", reply_markup=cancel_keyboard, parse_mode=ParseMode.HTML
    )

    await Anketa.nomer_p.set()

#–Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞
@dp.message_handler(state=Anketa.nomer_p, content_types=types.ContentTypes.TEXT)
async def nomer_ts(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(nomer_p=message.text)
    await bot.send_message(
        message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:</b>",
        reply_markup=cancel_keyboard,
        parse_mode=ParseMode.HTML
    )

    await Anketa.nomer_ts.set()

@dp.message_handler(state=Anketa.nomer_ts, content_types=types.ContentTypes.TEXT)
async def comments(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(nomer_ts=message.text)
    await bot.send_message(
        message.chat.id, "<b>–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>",
        reply_markup=cancel_keyboard,
        parse_mode=ParseMode.HTML
    )

    await Anketa.comments.set()

#—Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state=Anketa.comments, content_types=types.ContentTypes.TEXT)
async def text(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(comments=message.text)
    await bot.send_message(
        message.chat.id, "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>",
        reply_markup=next_com_keyboard,
        parse_mode=ParseMode.HTML
    )

    await Anketa.text.set()


@dp.message_handler(state=Anketa.text, content_types=types.ContentTypes.TEXT)
async def confirmation(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await bot.send_message(
        message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ—â–µ –∑–∞—è–≤–∫—É?\n\n–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç(–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ), –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n\nüëá\n‚úâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É",
        reply_markup=reg_keyboard,

    )

    # Insert –ë–î
    workers.insert_one(
        {
            "–î–∞—Ç–∞": data.get("date_z"),
            "–í—Ä–µ–º—è": data.get("timer_r"),
            "–•–û–£": data.get("model_r"),
            "–ó–∞–∫–∞–∑—á–∏–∫": data.get("name_c"),
            "–¢–µ–ª–µ—Ñ–æ–Ω": data.get("nomer_p"),
            "–ù–æ–º–µ—Ä –¢–°": data.get("nomer_ts"),
            "–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è": data.get("comments"),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": data.get("text"),
        }
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2 –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å callback –¥–∞–Ω–Ω—ã–º–∏
    await bot.send_message(
        admin_chat_id,
        f"<b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç</b> @{message.from_user.username}\n\n"
        f'<b>–î–∞—Ç–∞:</b> {data.get("date_z")}\n'
        f'<b>–í—Ä–µ–º—è:</b> {data.get("timer_r")}\n\n'
        f'<b>–•–û–£:</b> {data.get("model_r")}\n'
        f'<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {data.get("name_c")}\n'
        f'<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get("nomer_p")}\n'
        f'<b>–ù–æ–º–µ—Ä –¢–°:</b> {data.get("nomer_ts")}\n\n'
        f'<b>–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> {data.get("comments")}\n'
        f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get("text")}',
        parse_mode=ParseMode.HTML,
        reply_markup=inline(
            f"{message.chat.id}",
            f"{message.from_user.username}",
            f'{"text"}',
            f'{"model_r"}',
        ),
    )
    await bot.send_message(
        priem_chat_id,
        f"<b>–ó–∞—è–≤–∫–∞ –æ—Ç</b> @{message.from_user.username}\n\n"
        f'<b>–î–∞—Ç–∞:</b> {data.get("date_z")}\n'
        f'<b>–í—Ä–µ–º—è:</b> {data.get("timer_r")}\n\n'
        f'<b>–•–û–£:</b> {data.get("model_r")}\n'
        f'<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {data.get("name_c")}\n'
        f'<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get("nomer_p")}\n'
        f'<b>–ù–æ–º–µ—Ä –¢–°:</b> {data.get("nomer_ts")}\n\n'
        f'<b>–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> {data.get("comments")}\n'
        f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get("text")}',
        parse_mode=ParseMode.HTML,
        reply_markup=inline2(
            f"{message.chat.id}",
            f"{message.from_user.username}",
            f'{"text"}',
            f'{"model_r"}',
        ),
    )

    # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º "–æ–ø—Ä–æ—Å"
    await state.finish()


# –¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è inline

@dp.callback_query_handler(reg_callback.filter(status="0"))
# callback –¥–∞–Ω–Ω—ã–µ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
async def decline(call: CallbackQuery, callback_data: dict):
    await call.answer()
    print(call.message.message_id, "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û")
    await call.message.forward(priem_chat_id, call.message.message_id)
    # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await bot.edit_message_text(

        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", admin_chat_id, call.message.message_id
    )
    await bot.send_message(
        priem_chat_id,

        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í —Ä–µ–º–æ–Ω—Ç(–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ) –Ω–µ –±–µ—Ä–µ–º!"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç.
    await bot.send_message(int(callback_data.get("chat_id")), "‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ö–õ–û–ù–ï–ù–ê. –ß–∏–Ω–∏—Ç—å –Ω–µ –±—É–¥–µ–º!")

@dp.callback_query_handler(reg_callback.filter(status="00"))
# callback –¥–∞–Ω–Ω—ã–µ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
async def decline(call: CallbackQuery, callback_data: dict):
    await call.answer()
    print(call.message.message_id, "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û")
    await call.message.forward(admin_chat_id, call.message.message_id)
    await call.message.forward(priem_chat_id, call.message.message_id)
    # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await bot.edit_message_text(

        "‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê. –ö—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É! –†–µ–º–æ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç!", priem_chat_id, call.message.message_id
    )
    await bot.send_message(
        admin_chat_id,

        "‚òù –í–æ—Ç —ç—Ç–∞\n"
        "‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê. –ö—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É! –†–µ–º–æ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç!\n\n"
        "‚Äº –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª—É—á–∞–π–Ω–æ –∏–ª–∏ –ø–æ –æ—à–∏–±–∫–µ, –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É!",


    )
    await bot.send_message(
        priem_chat_id,

        "‚òù –í–æ—Ç —ç—Ç–∞\n"
        "‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê. –ö—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É! –†–µ–º–æ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç!\n\n"
        "‚Äº –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª—É—á–∞–π–Ω–æ –∏–ª–∏ –ø–æ –æ—à–∏–±–∫–µ, —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ @casqeaux",

    )


@dp.callback_query_handler(reg_callback.filter(status="1"))
async def accept(call: CallbackQuery, callback_data: dict, ):
    await call.answer()
    print(call.message.message_id, "‚úÖ –û–î–û–ë–†–ï–ù–û")
    await call.message.forward(priem_chat_id, call.message.message_id)
    await bot.edit_message_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.", admin_chat_id, call.message.message_id

    )
    await bot.send_message(
        priem_chat_id,

        "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç.
    await bot.send_message(
        int(callback_data.get("chat_id")), "üî• –ó–∞—è–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞. \n –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=reg_keyboard,
    )
##–ê–Ω–µ–∫–¥–æ—Ç—ã
@dp.message_handler(text='üòÇ –ê–Ω–µ–∫–¥–æ—Ç?')
async def joke(message: types.Message):
    text = await get_joke()

    await bot.send_message(message.chat.id, text)

async def get_joke():
    joke_html = requests.get('https://nekdo.ru/random/').text
    joke_text = BeautifulSoup(joke_html, 'lxml').find('div', class_='text').get_text()

    return joke_text

##–ê–Ω–µ–∫–¥–æ—Ç
@dp.message_handler(text='/joke')
@dp.message_handler(text='joke')
@dp.message_handler(text='–∞–Ω–µ–∫–¥–æ—Ç')
@dp.message_handler(text='–ê–Ω–µ–∫–¥–æ—Ç')
async def joke(message: types.Message):
    text = await get_joke()

    await bot.send_message(message.chat.id, text)

async def get_joke():
    joke_html = requests.get('https://nekdo.ru/random/').text
    joke_text = BeautifulSoup(joke_html, 'lxml').find('div', class_='text').get_text()

    return joke_text

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)